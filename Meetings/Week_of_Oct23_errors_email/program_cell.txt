# Difference for VIIRS and EAC4
data = ds['aod'] #can use the variable aod_best for different resolution of data.
data2 = ds2['aod550']
#data4 = ds4['total_aod']
difference1 = ds['aod'] - ds2['aod550'] #VIIRS and EAC4 differnece...plot each data set (2 figures) then their difference (figure 3)...do this for the other 2 comparisons (so 9 figure total)
# print(data)
# print(data2)
# print(data4)
'''
Defines a variable proj_map and assigns it the map projection Robinson from the Cartopy library
(ccrs). The Robinson projection is a world map projection often used for global visualizations.
'''
#proj_map  = ccrs.Robinson()
proj_map = ccrs.PlateCarree()

'''
Defines a variable proj_data and assigns it to the PlateCarree map projection. This projection
represents a simple, equidistant cylindrical projection often used for displaying data on maps.

'''
proj_data = ccrs.PlateCarree()


#The following block creates a figure (fig) containing a 3x2 grid of subplots (axs).
fig, axs = plt.subplots(5,3,
                        #Specifies that each subplot should use the proj_map projection defined earler.
                        subplot_kw={'projection': proj_map},
                        #sets the spacing between the subplots with a small horizontal space (wsapce) and vertical space (hspace). More parameters like figsize and constrained_layout are set to customize size and layout.
                        gridspec_kw={'hspace': 0.1, 'wspace': 0.01},#When is adjusted wspace it did not make the subplots come closer together widthwise???
                        **{'figsize': [10, 8], 'constrained_layout': False},
                        )
#Prints the axs varialbe which contains references to the individual subplots creaetd in the previous step.
print(axs)

# =================| contour |=================================================

#These lines convert the axs object, which is initially a 2D array of subplots, into a 1D array using axs.flat.
axs = axs.flat

#The first subplot (at index 0) is removed with axs[0].remove(). This is likely done to create a specific layout for the subplots.
#axs[0].remove()

#The resulting axs now contains references to the remaining subplots (excluding the first one).
#axs = axs[1:]

#The following five lines configure the subplots and are used to customize appearance of the subplots.

#An empty list that will store contourf or pseudocolor objects for each subplot.
cf_list = []

#A list of subplot titles.
title = ['June 14','June 19','June 24','June 15','June 20','June 25','June 16','June 21','June 26','June 17','June 22','June 27','June 18','June 23','June 28', ]

#A color map (colormap) for visualizing data.
cmap=plot.get_cmap('MPL_YlOrBr')
#cmap

#An array of levels for data contouring.
levs = np.linspace(0, 1, 10*5+1)

#A normalization object that maps data values to colors based on the defined levels.
norm = BoundaryNorm(levs, ncolors=cmap.N, extend='max')

'''
This line initiates a loop over the subplots, where idx represents the index of the subplot in the
array, and ax is the reference to the current subplot being processed.
'''

step = 20 #alters the resolution...the lower the number, the better the resolution...this variable appears in cf_list variable down below.
for idx, ax in enumerate(axs):
    #Configures the maps settings for the current subplot.
    map_conf(ax)

    # cf_list += [ax.contourf(data.lon, data.lat, data[idx, :, :],
    #                        levels=np.linspace(0., 0.5, 5*5+1),
    #                        cmap=cmap,
    #                        extend='max',
    #                        transform=proj_data,
    #                        )]

    #Sets the title for the current subplot based on the title list, with the title text and font size customized.
    # ax.set_title(title[idx], fontsize=5, pad=5)
    ax.text(-110, 5, title[idx], fontsize=8) #reformats where the data shows up on the figure.

    '''
    For each subplot, this code creates a pseudocolor plot (pcolormesh) using data from the variable
    data. The data is plotted on the subplot's map projection (proj_data). Parameters like shading,
    norm, and cmap are used to configure the appearance of the pseudocolor plot. The resulting
    pseudocolor plot object is added to the cf_list.
    '''
    cf_list += [ax.pcolormesh(difference1.lon[::step], difference1.lat[::step], difference1[idx, ::step, ::step],
                              shading='auto',
                              norm=norm,
                              cmap=cmap,
                              transform=proj_data,
                            )]

    '''
    These lines customize the appearance of the subplots further.
    '''
    #Subplots with idx less than or equal to 2 have their x-axis tick labels removed.
    if idx <= 2:
            ax.set_xticklabels([])

    #Subplots with idx equal to 2 or 4 have their y-axis tick labels removed.
    if idx == 2 or idx==4:
            ax.set_yticklabels([])

    '''
    Text annotations are added to the bottom of each subplot to display numeric values
    (likely global averages) with blue color and customized alignment.
    '''
    #ax.text(0, -55, '{:0.3f}'.format(globe_average[idx].values),
            #fontsize=12, color='blue',
            #verticalalignment='center', horizontalalignment='center',
            #transform=proj_data,
            #)

#This line adjusts the layout and spacing of the subplots within the figure, setting properties such as margin sizes and spacing between subplots.
#fig.subplots_adjust(bottom=0.02, top=0.98, left=0.1, right=0.8, wspace=0.02, hspace=0.05)

#A color bar axis (cb_ax) is added to the figure. This axis is positioned at specific coordinates within the figure and has a defined width and height. The first two values represent x and y of the
#entire color bar, while the next x and y represent the actual gradient bar.
cb_ax = fig.add_axes([0.22, 0.05, 0.6, 0.02])

#The color_bar function is called to create and customize a color bar based on the pseudocolor plots in cf_list[4]. The color bar is configured with a label and horizontal orientation, and tick steps are specified.
color_bar(cf_list[4], cb_ax, label='MODIS-Terra AOD$_{550}$', orientation='horizontal', tickstep=10)

# =================| subplot adjust |==========================================
'''
This line extracts the position information of the first subplot (axs[0]), and assigns it to the
variable box. The get_position() method retrieves the position of the subplot within the figure.
'''
#box = axs[0].get_position()

#Shifts the position of the first subplot to the left by 0.205 units, changing its horizontal position in the figure.
#box.x0 = box.x0 - 0.205
#box.x1 = box.x1 - 0.205

#Sets the position of the first subplot to the modified box.
#axs[0].set_position(box)

#Displays the updated figure with the adjusted subplot layout using Matplotlib's plt.show() funtion.
plt.show()

